// SPDX-License-Identifier:MIT

pragma solidity >0.7.0 <=0.9.0;

contract EscrowII {

    address manager;
    address buyer;
    address seller;
    bool packageSent;
    bool packageReceived;
    bool refundStatement;

    constructor(address _manager, address _buyer, address _seller) {
        manager = _manager;
        buyer = _buyer;
        seller = _seller;
    }

    function Deposit() public payable {
        require(msg.sender == buyer, "Buyer only");
        buyer = payable(msg.sender);
    }

    function Send() public returns(bool){
        require(msg.sender == seller, "Seller only");
        require(address(this).balance > 0, "No deposited money");
        packageSent = true;
        return packageSent;
    }

    function Receive() public returns(bool) {
        require(msg.sender == buyer, "Buyer only");
        require(packageSent == true, "Barang belum dikirim");
        packageReceived = true;
        if (refundStatement != true) {
            payable(seller).transfer(address(this).balance);
        } else {
            revert("Ada refund request, need to resolve");
        }
        return packageReceived;
    }

    function refundRequest() public returns(bool) {
        require(msg.sender == buyer, "Buyer only");
        refundStatement = true;
        return refundStatement;
    }

    function Refund() public {
        require(msg.sender == manager, "Manager only");
        require(refundStatement == true, "No problem found");
        payable(buyer).transfer(address(this).balance);
    }

    function Resolve() public {
        require(msg.sender == manager, "Manager only");
        require(refundStatement == true, "No problem found");
        payable(seller).transfer(address(this).balance);
    }

}
