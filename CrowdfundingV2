// SPDX-License-Identifier:MIT

pragma solidity >0.7.0 <=0.9.0;

contract CrowdFundingII {
    
    address[] contributor;
    mapping(address => uint256) contributions;
    uint targetEther;
    uint money;
    uint private balanceEther = address(this).balance;
    uint private deadline;

    constructor(address manager, uint _target, uint _deadline) {
        manager = msg.sender;
        targetEther = _target;
        deadline = block.timestamp + _deadline;
    }

    function contribute() public payable {
        require(balanceEther < targetEther, "Target dana telah tercapai");
        require(block.timestamp < deadline, "Waktu habis");

        // contributions[payable(msg.sender)] += msg.value;
        // contributor.push(msg.sender);

        uint contribution = msg.value;
        uint remaining = targetEther - balanceEther;

        if (contribution <= remaining) {
            balanceEther += contribution;
        } else {
            balanceEther += remaining;
            uint excess = contribution - remaining;
            payable(msg.sender).transfer(excess);
        }
        contributions[payable(msg.sender)] += contribution;
        contributor.push(msg.sender);
    }

    function refund() public {
        require(block.timestamp > deadline, "Belum mencapai waktu deadline");

        for(uint i=0; i < contributor.length; i++) {
            payable(contributor[i]).transfer(contributions[payable(contributor[i])]);
        }
    }

    function tampilkanTarget() public view returns(uint) {
        return targetEther;
    }

    function sendMoney(address receiver) public {
        payable (receiver).transfer(address(this).balance);
    }

    function getContributor() public view returns(address[] memory) {
        return contributor;
    }

    function tampilkanDeadline() public view returns(uint) {
        return deadline;
    }

    function tampilkanTimeStamp() public view returns(uint) {
        return block.timestamp;
    }
}
